AWSTemplateFormatVersion: "2010-09-09"
Description: |
  This template creates a playground Amazon Linux 2023 EC2 instance to demonstrate AWS CLI features

Metadata:
  Author: Isaac Vallhonrat
  GitHubProfile: https://github.com/ivallhon

Parameters:
  Name: 
    Description: Friendly Name for the Playground EC2 Instance
    Type: String
    Default: aws-cli-playground
  VpcId:
    Description: URL of your Dynatrace environment. If you're deploying to Dynatrace Managed tenant, enter here the URL of your tenant AG without the trailing API endpoint, e.g. https://{your-activegate-domain}:9999/e/{your-environment-id}
    Type: String
    Default: ""
  SubnetId:
    Description: Subnet where to launch the EC2 Instance
    Type: String
    Default: ""
  KeyPair:
    Description: Amazon EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: ""

Conditions:
  VpcIsDefined: !Not [!Equals [!Ref VpcId, "" ]]
  SubnetIsDefined: !Not [!Equals [!Ref SubnetId, "" ]]
  KeyPairIsDefined: !Not [!Equals [!Ref KeyPair, "" ]]

Resources:
  PlaygroundEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config: 
          files:
            /home/ec2-user/.aws/cli/alias:
              mode: '000644'
              owner: ec2-user
              group: ec2-user
              content: |
                [toplevel]
                whoami = sts get-caller-identity
                describe-azs = ec2 describe-availability-zones --query 'AvailabilityZones[].{Name: ZoneName, Id: ZoneId}'

                # from https://docs.aws.amazon.com/cli/v1/userguide/cli-usage-alias.html
                myip =
                  !f() {
                    dig +short myip.opendns.com @resolver1.opendns.com
                  }; f

                [command ec2]
                list-instances = describe-instances --query 'Reservations[].Instances[] | sort_by([].{AZ: Placement.AvailabilityZone, Id: InstanceId, Type: InstanceType Name: Tags[?Key==`Name`].Value | [0], PublicIP: PublicIpAddress, PrivateIP: PrivateIpAddress, VPC: VpcId, Subnet: SubnetId},&AZ)'
                list-security-groups = describe-security-groups --query 'SecurityGroups[].{Name: GroupName, Id: GroupId, VPC: VpcId}'
                list-vpcs = describe-vpcs --query 'Vpcs[].{Id: VpcId, CIDR: CidrBlock, Name: Tags[?Key==`Name`].Value | [0], IsDefault: IsDefault}' 

                describe-instance-by-name =
                   !f() {
                      aws ec2 describe-instances --query 'Reservations[].Instances[]' --filter Name=tag:Name,Values=${1}
                   }; f

                get-instanceid-by-name =
                   !f() {
                      aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --filter Name=tag:Name,Values=${1} --output text
                   }; f

                get-running-instanceid-by-name =
                   !f() {
                      aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --filters Name=tag:Name,Values=${1} Name=instance-state-name,Values=running --output text
                   }; f

                ssh-by-name =
                   !f() {
                      INSTANCE_ID=$(aws ec2 get-running-instanceid-by-name ${1} --output text);
                      if [ -z "$INSTANCE_ID" ]
                      then
                        echo "Error! No EC2 Instance exists with name ${1}"
                        exit 1
                      else
                        aws ssm start-session --target $INSTANCE_ID
                      fi
                   }; f

                # from https://docs.aws.amazon.com/cli/v1/userguide/cli-usage-alias.html
                authorize-my-ip = 
                   !f() {
                      myip=$(aws myip)
                      aws ec2 authorize-security-group-ingress --group-id ${1} --protocol all --port 0-65535 --cidr "$myip/32"
                   }; f

                [command ecr]
                docker-login-in-region = 
                   !f() {
                      accountid=$(aws ecr describe-registry --region ${1} --query 'registryId' --output text)
                      aws ecr get-login-password --region ${1} | docker login --username AWS --password-stdin ${accountid}.dkr.ecr.${1}.amazonaws.com
                   }; f

                [command ssm]

                get-amis-for-os = 
                    !f() {
                       case $1 in
                          amazon-linux)
                              parameter="ami-amazon-linux-latest";;
                          ubuntu-noble)
                              parameter="canonical/ubuntu/server/24.04/stable/current/";;
                          ubuntu-jammy)
                              parameter="canonical/ubuntu/server/22.04/stable/current/";;
                          ubuntu-focal)
                              parameter="canonical/ubuntu/server/20.04/stable/current/";;
                          windows)
                              parameter="ami-windows-latest";;
                          macos)
                              parameter="ec2-macos";;
                           *)
                              echo "invalid OS parameter";
                              exit 1;;
                        esac

                        aws ssm get-parameters-by-path \
                          --path "/aws/service/${parameter}" \
                          --query 'Parameters[].{Name: Name, AMI: Value, LastModified: LastModifiedDate} | sort_by(@,&Name)' \
                          --recursive
                    }; f
          packages:
            yum:
              git: []
              python3-pip: []
              aws-cfn-bootstrap: []
              docker: []
          commands:
            enable_cli_autocompletion:
              command: |
                export AUTOCOMPLETE_PATH=$(dirname $(which aws_completer)) && \
                echo "export PATH=$AUTOCOMPLETE_PATH:$PATH" >> /home/ec2-user/.bashrc && \
                echo 'complete -C "'"$AUTOCOMPLETE_PATH"'/aws_completer" aws' >> /home/ec2-user/.bashrc
            install_jmespath_terminal: 
              command: |
                pip3 install --no-input git+https://github.com/jmespath-community/jmespath.terminal.git
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64}}"
      InstanceType: "t4g.small"
      IamInstanceProfile: !Ref InstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource PlaygroundEC2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref Name
      KeyName: !If [ KeyPairIsDefined, !Ref KeyPair, !Ref AWS::NoValue]
      VPC: !If [ VpcIsDefined, !Ref VpcId, !Ref AWS::NoValue]
      SubnetId: !If [ SubnetIsDefined, !Ref SubnetId, !Ref AWS::NoValue]

  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2IAMRole
  
  S3RWRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal: 
              AWS: !GetAtt EC2IAMRole.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

Outputs:
  S3FullAccessRole:
    Description: Role ARN of the IAM role for S3 full access
    Value: !GetAtt S3RWRole.Arn
  PlayGroundEC2InstanceId:
    Description: EC2 Instance Id for the playground instance
    Value: !Ref PlaygroundEC2Instance
